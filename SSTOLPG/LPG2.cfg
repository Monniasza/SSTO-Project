//LPG AutoGenerator v2
//39% LPG by volume
//61% Oxidizer by volume
//195u LPG / 61u Ox
//Density of fuel : 805 g/l
//Density of tank: 10 g/l

//Add ModuleLPG to inhibit creation of LPG version
//, or add it with with type=LF for LPG tank
//, or type=LFO for LPG/O tank
//For custom LPG to work, it needs a valid 'amount' key in ModuleLPG

//5x + y = 256
// x + y = 100
//4x     = 156

//Configuration
//Supported output: IFS, Stock
LPGConfigs{
	//Portion of the mass of LPG fuel tanks
	LPGTankDensity = 0.01
	//POwer mutiplier for LPG engines - DO NOT CHANGE IF SMURFF IS INSTALLED
	LPGBoost = 1.5
	//Weight mutiplier for all LPG engines
	LPGEngineWeightMul = 0.375
	//Efficiency mutiplier for standard rockets
	LPGEffStd = 1.06
	//Efficiency mutiplier for jet engines
	LPGEffJets = 1.25
	//Efficiency mutiplier for Behemoth Aerospace Engineering rockets
	LPGEffBAE = 1.15
	//Efficiency mutiplier for Bluegog Design Bureau rockets
	LPGEffBDB = 1.25
	
	//Should tanks support Firespitter Fuel Switch?
	AllowFS = true
	//Should tanks support Interstellar Fuel Switch?
	AllowIFS = true
	
	//DO NOT CHANGE - this is set automatically
	OutMode = Stock
}

//Preliminary checks
@LPGConfigs:FOR[0LPG]:NEEDS[SMURFF]{
	LPGBoost = #$@SMURFFCONFIG/enginethrustfactor$
	LPGEngineWeightMul= #$@SMURFFCONFIG/enginemassfactor$
}
@LPGConfigs:FOR[0LPG]:HAS[#AllowFS[true]]:NEEDS[Firespitter]{
	@OutMode = FS
}
@LPGConfigs:FOR[0LPG]:HAS[#AllowIFS[true]]:NEEDS[InterstellarFuelSwitch]{
	@OutMode = IFS
}

//Data collection - tanks
@PART[*]:FOR[1LPG]{
	lpgLF = 0
	lpg = false
}
@PART[*]:HAS[@RESOURCE[LiquidFuel]]:FOR[1LPG]{
	@lpg = true
	lpgTank = true
	@lpgLF += #$RESOURCE[LiquidFuel]/maxAmount$
}
@PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer]]:FOR[1LPG]{
	@lpg = true
	lpgRocket = true
	@lpgLF += #$RESOURCE[Oxidizer]/maxAmount$
}
//Data collection - engines
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:FOR[1LPG]{
	@lpg = true
	lpgEngine = true
}
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[IntakeAir]]]:FOR[1LPG]{
	@lpg = true
	lpgEngine = true
}
@PART[*]:HAS[#lpg[true],#lpgExclude[true]]:FOR[1LPG]{ //Exclude LPG as needed
	@lpg = false
}
//Forking
+PART[*]:HAS[#lpg[true]]:FOR[1LPG]{ //strangely this does not create LPG tanks
	@name = #$name$_LPGA
	@title = #$title$ (LPG)
	
	%tankmass = #$lpgLF$
	@tankmass *= 0.125
	@tankmass *= #$@RESOURCE_DEFINITION[LiquidFuel]/density$
	
	%lpgTankmass = #$lpgLF$
	@lpgTankmass *= #$@LPGConfigs/LPGTankDensity$
	@lpgTankmass *= #$@RESOURCE_DEFINITION[LPG]/density$
	
	%enginemass = #$mass$
	@enginemass -= #$tankmass$
	
	%tankmode = #$@LPGConfigs/OutMode$
	
	//Trash LF and Ox
	!RESOURCE[LiquidFuel]{}
	!RESOURCE[Oxidizer]{}
}
//Rebalancing
@PART[*_LPGA]:FOR[1LPG]{
	lpgEff = #$@LPGConfigs/LPGEffStd$
}
@PART[bluedog_*_LPGA]:FOR[1LPG]{ //Increased LPG improvement - BDB engines have inferior Isp, so increase by 22%
	@lpgEff = #$@LPGConfigs/LPGEffBDB$
}
@PART[BAEengine*_LPGA]:FOR[1LPG]{ //Increased LPG improvement - BAE engines have inferior Isp, so increase by 15%
	@lpgEff = #$@LPGConfigs/LPGEffBAE$
}
@PART[*_LPGA]:HAS[#lpgEngine[true]]:FOR[1LPG]{
	@enginemass *= #$@LPGConfigs/LPGEngineWeightMul$
}

@PART[*_LPGA]:FOR[1LPG]{
	//Rockets
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]{
		@PROPELLANT[LiquidFuel]{
			@name = LPG
			@ratio = 0.35
		}
		@PROPELLANT[Oxidizer]{
			@ratio = 0.65
		}
		@atmosphereCurve{
		  k0 = #$key,0[1, ]$
		  @k0 *= #$../../lpgEff$
		  @key,0 = #0 $k0$
		  
		  k1 = #$key,1[1, ]$
		  @k1 *= #$../../lpgEff$
		  @key,1 = #1 $k1$
		}
	}
	
	//Jets
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[IntakeAir]]{  //Jets
		//3.5:1 mass OX/LPG
		@PROPELLANT[LiquidFuel]{
			@name = LPG
			@ratio *= 5
		}
		
		@atmosphereCurve
		{
		  k0 = #$key,0[1, ]$
		  @k0 *= #$@LPGConfigs/LPGEffJets$
		  @key,0 = #0 $k0$
		  
		  k1 = #$key,1[1, ]$
		  @k1 *= #$@LPGConfigs/LPGEffJets$
		  @key,1 = #1 $k1$
		}
	}
	
	%mass = #$lpgTankmass$
	@mass += #$enginemass$
}

//Output
@PART[*_LPGA]:HAS[#lpgTank[true],~lpgRocket[true]]:LAST[zzzLPG]{
	//Stock jet tanks
	RESOURCE{
		name = LPG
		%amount = #$../lpgLF$
		%maxAmount = #$amount$
	}
}
@PART[*_LPGA]:HAS[#lpgTank[true],#lpgRocket[true]]:LAST[zzzLPG]{
	//Stock rocket tanks
	RESOURCE{
		name = LPG
		%amount = #$../lpgLF$
		@amount *= 0.35
		%maxAmount = #$amount$
	}
	RESOURCE{
		name = Oxidizer
		%amount = #$../lpgLF$
		@amount *= 0.65
		%maxAmount = #$amount$
	}
}
@PART[*_LPGA]:HAS[#lpgTank[true],#tankmode[IFS]]:LAST[zzzLPG]{
	//Generate Interstellar Fuel Switch configs
	lpgAmount = #$lpgLF$
	lpgoFAmount = #$lpgLF$
	@lpgoFAmount *= 0.35
	lpgoOAmount = #$lpgLF$
	@lpgoOAmount *= 0.65
	
	!MODULE[InterstellarFuelSwitch]{}
	//IFS tanks
	MODULE{
		name = InterstellarFuelSwitch
		tankSwitchNames = LPGO;LPG
		resourceGui = LPGO;LPG
		resourceNames = LPG,Oxidizer;LPG
		resourceAmounts = #$../lpgoFAmount$,$../lpgoOAmount$;$../lpgAmount$
		basePartMass = #$../mass$
		tankTechReq = start;start
		displayCurrentTankCost = false
		hasGUI = true
		availableInFlight = true
		availableInEditor = true
		inEditorSwitchingTechReq = start
		inFlightSwitchingTechReq = fuelSystems
		showInfo = true
	}
}
@PART[*_LPGA]:HAS[#lpgTank[true],#tankmode[FS]]:LAST[zzzLPG]{
	//Generate Firespitter Fuel Switch configs
	lpgAmount = #$lpgLF$
	lpgoFAmount = #$lpgLF$
	@lpgoFAmount *= 0.35
	lpgoOAmount = #$lpgLF$
	@lpgoOAmount *= 0.65
		
	//FS tanks
	%MODULE[FSfuelSwitch]{
		%name = FSfuelSwitch
		%tankSwitchNames = LPGO;LPG
		%resourceGui = LPGO;LPG
		%resourceNames = LPG,Oxidizer;LPG
		%resourceAmounts = #$../lpgoFAmount$,$../lpgoOAmount$;$../lpgAmount$
		%basePartMass = #$../mass$
		%tankTechReq = start;start
		%displayCurrentTankCost = false
		%hasGUI = true
		%availableInFlight = true
		%availableInEditor = true
		%inEditorSwitchingTechReq = start
		%inFlightSwitchingTechReq = fuelSystems
		%showInfo = true
	}
}
//Remove FSfuelSwitchForEveryTank LF modules
@PART[*_LPGA]:FINAL{
	@MODULE[FSfuelSwitch],*{ //It looks that this patch is not applied
		%testqty = #$resourceNames[0]$
		@testqty = #$testqty[0,;]$
	}
	!MODULE[FSfuelSwitch]:HAS[#testqty[LiquidFuel]]{}
}
